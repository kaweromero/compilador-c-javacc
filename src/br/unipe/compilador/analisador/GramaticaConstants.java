/* Generated By:JJTree&JavaCC: Do not edit this line. GramaticaConstants.java */
package br.unipe.compilador.analisador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 12;
  /** RegularExpression Id. */
  int INVALID_CONST = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int BREAK = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int SOMAR = 24;
  /** RegularExpression Id. */
  int SUBTRAIR = 25;
  /** RegularExpression Id. */
  int MULTIPLICAR = 26;
  /** RegularExpression Id. */
  int DIVIDIR = 27;
  /** RegularExpression Id. */
  int PARENTESE_ABRIR = 28;
  /** RegularExpression Id. */
  int PARENTESE_FECHAR = 29;
  /** RegularExpression Id. */
  int CHAVE_ABRIR = 30;
  /** RegularExpression Id. */
  int CHAVE_FECHAR = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int ATRIBUICAO = 34;
  /** RegularExpression Id. */
  int MENOR_QUE = 35;
  /** RegularExpression Id. */
  int MAIOR_QUE = 36;
  /** RegularExpression Id. */
  int IGUAL = 37;
  /** RegularExpression Id. */
  int DEFERENTE = 38;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 39;
  /** RegularExpression Id. */
  int MAIOR_IGUAL = 40;
  /** RegularExpression Id. */
  int PONTO_VIRGULA = 41;
  /** RegularExpression Id. */
  int VIRGULA = 42;
  /** RegularExpression Id. */
  int NUM_INTEIRO = 43;
  /** RegularExpression Id. */
  int NUM_PF = 44;
  /** RegularExpression Id. */
  int ID = 45;
  /** RegularExpression Id. */
  int LETRA = 46;
  /** RegularExpression Id. */
  int DIGITO = 47;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"*/\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
    "\"int\"",
    "\"float\"",
    "\"void\"",
    "\"return\"",
    "\"while\"",
    "\"else\"",
    "\"if\"",
    "\"break\"",
    "\"true\"",
    "\"false\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"OR\"",
    "\"AND\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\" >=\"",
    "\";\"",
    "\",\"",
    "<NUM_INTEIRO>",
    "<NUM_PF>",
    "<ID>",
    "<LETRA>",
    "<DIGITO>",
  };

}
