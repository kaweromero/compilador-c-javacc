/* Generated By:JJTree&JavaCC: Do not edit this line. Gramatica.java */
package br.unipe.compilador.analisador;
import br.unipe.compilador.analisador.CustomNode.TIPO;

public class Gramatica/*@bgen(jjtree)*/implements GramaticaTreeConstants, GramaticaConstants {/*@bgen(jjtree)*/
  protected JJTGramaticaState jjtree = new JJTGramaticaState();Controlador control = new Controlador();

  final public SimpleNode Programa() throws ParseException {
    trace_call("Programa");
    try {
 /*@bgen(jjtree) Programa */
  Programa jjtn000 = new Programa(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Funcao();
        jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Programa");
    }
  }

  final public void Funcao() throws ParseException {
    trace_call("Funcao");
    try {
 /*@bgen(jjtree) Funcao */
  Funcao jjtn000 = new Funcao(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  CustomNode.TIPO tipo;
      try {
        tipo = TipoRetorno();
        t = jj_consume_token(ID);
        ParametrosFuncao();
        CorpoFuncao();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    control.declaracao(tipo, t, true, true);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Funcao");
    }
  }

  final public TIPO TipoRetorno() throws ParseException {
    trace_call("TipoRetorno");
    try {
 /*@bgen(jjtree) TipoRetorno */
  TipoRetorno jjtn000 = new TipoRetorno(JJTTIPORETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          jj_consume_token(VOID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return TIPO.NULL;}
          break;
        case INT:
          jj_consume_token(INT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return TIPO.INT;}
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return TIPO.FLOAT;}
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("TipoRetorno");
    }
  }

  final public void ParametrosFuncao() throws ParseException {
    trace_call("ParametrosFuncao");
    try {
      jj_consume_token(PARENTESE_ABRIR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
        ParametroFuncao();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_1;
          }
          jj_consume_token(VIRGULA);
          ParametroFuncao();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(PARENTESE_FECHAR);
    } finally {
      trace_return("ParametrosFuncao");
    }
  }

  final public void ParametroFuncao() throws ParseException {
    trace_call("ParametroFuncao");
    try {
 /*@bgen(jjtree) ParametroFuncao */
  ParametroFuncao jjtn000 = new ParametroFuncao(JJTPARAMETROFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  CustomNode.TIPO tipo;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
      tipo = CustomNode.TIPO.INT;
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
      tipo = CustomNode.TIPO.FLOAT;
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    control.declaracao(tipo, t);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("ParametroFuncao");
    }
  }

  final public void CorpoFuncao() throws ParseException {
    trace_call("CorpoFuncao");
    try {
 /*@bgen(jjtree) CorpoFuncao */
  CorpoFuncao jjtn000 = new CorpoFuncao(JJTCORPOFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CHAVE_ABRIR);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          Declaracao();
          jj_consume_token(PONTO_VIRGULA);
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
          case WHILE:
          case IF:
          case BREAK:
          case PONTO_VIRGULA:
          case ID:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          Comando();
        }
        jj_consume_token(CHAVE_FECHAR);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("CorpoFuncao");
    }
  }

  final public void Comando() throws ParseException {
    trace_call("Comando");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Atribuicao();
        jj_consume_token(PONTO_VIRGULA);
        break;
      case IF:
        If();
        break;
      case WHILE:
        While();
        break;
      case RETURN:
        Return();
        jj_consume_token(PONTO_VIRGULA);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(PONTO_VIRGULA);
        break;
      case PONTO_VIRGULA:
        jj_consume_token(PONTO_VIRGULA);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Comando");
    }
  }

  final public void Declaracao() throws ParseException {
    trace_call("Declaracao");
    try {
 /*@bgen(jjtree) Declaracao */
  Declaracao jjtn000 = new Declaracao(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  CustomNode.TIPO tipo;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
      tipo = TIPO.INT;
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
      tipo = TIPO.FLOAT;
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          jj_consume_token(ATRIBUICAO);
          ExpressaoMatematica();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    control.declaracao(tipo, t);
    jjtn000.jjtSetValue(t);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Declaracao");
    }
  }

  final public void Atribuicao() throws ParseException {
    trace_call("Atribuicao");
    try {
 /*@bgen(jjtree) Atribuicao */
  Atribuicao jjtn000 = new Atribuicao(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(ID);
        ValorAtribuicao();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Atribuicao");
    }
  }

  final public void ValorAtribuicao() throws ParseException {
    trace_call("ValorAtribuicao");
    try {
      jj_consume_token(ATRIBUICAO);
      ExpressaoMatematica();
    } finally {
      trace_return("ValorAtribuicao");
    }
  }

  final public void ExpressaoMatematica() throws ParseException {
    trace_call("ExpressaoMatematica");
    try {
 /*@bgen(jjtree) ExpressaoMatematica */
  ExpressaoMatematica jjtn000 = new ExpressaoMatematica(JJTEXPRESSAOMATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        TermoMatematico();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOMAR:
          case SUBTRAIR:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOMAR:
            jj_consume_token(SOMAR);
                Adicao jjtn001 = new Adicao(JJTADICAO);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
            try {
              TermoMatematico();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
            } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
            }
            break;
          case SUBTRAIR:
            jj_consume_token(SUBTRAIR);
                 Subtracao jjtn002 = new Subtracao(JJTSUBTRACAO);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
            try {
              TermoMatematico();
            } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
            } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
            }
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("ExpressaoMatematica");
    }
  }

  final public void TermoMatematico() throws ParseException {
    trace_call("TermoMatematico");
    try {
      FatorMatematico();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLICAR:
        case DIVIDIR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLICAR:
          jj_consume_token(MULTIPLICAR);
                      Multiplicacao jjtn001 = new Multiplicacao(JJTMULTIPLICACAO);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
          try {
            FatorMatematico();
          } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
          } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
          }
          break;
        case DIVIDIR:
          jj_consume_token(DIVIDIR);
                Divisao jjtn002 = new Divisao(JJTDIVISAO);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
          try {
            FatorMatematico();
          } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
          } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("TermoMatematico");
    }
  }

  final public void FatorMatematico() throws ParseException {
    trace_call("FatorMatematico");
    try {
      if (jj_2_1(3)) {
        jj_consume_token(PARENTESE_ABRIR);
        ExpressaoMatematica();
        jj_consume_token(PARENTESE_FECHAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INTEIRO:
        case NUM_PF:
        case ID:
          TipoMatematico();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("FatorMatematico");
    }
  }

  final public void TipoMatematico() throws ParseException {
    trace_call("TipoMatematico");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Identificador();
        break;
      case NUM_INTEIRO:
      case NUM_PF:
        Numero();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TipoMatematico");
    }
  }

  final public void Identificador() throws ParseException {
    trace_call("Identificador");
    try {
 /*@bgen(jjtree) Identificador */
  Identificador jjtn000 = new Identificador(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTipo(control.getTipo(t));
    jjtn000.jjtSetValue(t);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Identificador");
    }
  }

  final public void Numero() throws ParseException {
    trace_call("Numero");
    try {
 /*@bgen(jjtree) Numero */
  Numero jjtn000 = new Numero(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INTEIRO:
          t = jj_consume_token(NUM_INTEIRO);
      jjtn000.setTipo(CustomNode.TIPO.INT);
          break;
        case NUM_PF:
          t = jj_consume_token(NUM_PF);
      jjtn000.setTipo(CustomNode.TIPO.FLOAT);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Numero");
    }
  }

  final public void If() throws ParseException {
    trace_call("If");
    try {
 /*@bgen(jjtree) If */
  If jjtn000 = new If(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
        jj_consume_token(PARENTESE_ABRIR);
        ExpressaoLogica();
        jj_consume_token(PARENTESE_FECHAR);
        jj_consume_token(CHAVE_ABRIR);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
          case WHILE:
          case IF:
          case BREAK:
          case PONTO_VIRGULA:
          case ID:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_6;
          }
          Comando();
        }
        jj_consume_token(CHAVE_FECHAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          Else();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("If");
    }
  }

  final public void Else() throws ParseException {
    trace_call("Else");
    try {
 /*@bgen(jjtree) Else */
  Else jjtn000 = new Else(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSE);
        jj_consume_token(CHAVE_ABRIR);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
          case WHILE:
          case IF:
          case BREAK:
          case PONTO_VIRGULA:
          case ID:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
          Comando();
        }
        jj_consume_token(CHAVE_FECHAR);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Else");
    }
  }

  final public void While() throws ParseException {
    trace_call("While");
    try {
 /*@bgen(jjtree) While */
  While jjtn000 = new While(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
        jj_consume_token(PARENTESE_ABRIR);
        ExpressaoLogica();
        jj_consume_token(PARENTESE_FECHAR);
        jj_consume_token(CHAVE_ABRIR);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
          case WHILE:
          case IF:
          case BREAK:
          case PONTO_VIRGULA:
          case ID:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_8;
          }
          Comando();
        }
        jj_consume_token(CHAVE_FECHAR);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("While");
    }
  }

  final public void Return() throws ParseException {
    trace_call("Return");
    try {
 /*@bgen(jjtree) Return */
  Return jjtn000 = new Return(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARENTESE_ABRIR:
        case NUM_INTEIRO:
        case NUM_PF:
        case ID:
          ExpressaoMatematica();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Return");
    }
  }

  final public void ExpressaoLogica() throws ParseException {
    trace_call("ExpressaoLogica");
    try {
 /*@bgen(jjtree) ExpressaoLogica */
  ExpressaoLogica jjtn000 = new ExpressaoLogica(JJTEXPRESSAOLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        TermoLogico();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_9;
          }
          jj_consume_token(OR);
             Or jjtn001 = new Or(JJTOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
          try {
            TermoLogico();
          } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
          } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
          }
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("ExpressaoLogica");
    }
  }

  final public void TermoLogico() throws ParseException {
    trace_call("TermoLogico");
    try {
      FatorLogico();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        jj_consume_token(AND);
              And jjtn001 = new And(JJTAND);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          FatorLogico();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
      }
    } finally {
      trace_return("TermoLogico");
    }
  }

  final public void FatorLogico() throws ParseException {
    trace_call("FatorLogico");
    try {
      if (jj_2_2(3)) {
        jj_consume_token(PARENTESE_ABRIR);
        ExpressaoLogica();
        jj_consume_token(PARENTESE_FECHAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARENTESE_ABRIR:
        case NUM_INTEIRO:
        case NUM_PF:
        case ID:
          RelacaoLogica();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("FatorLogico");
    }
  }

  final public void RelacaoLogica() throws ParseException {
    trace_call("RelacaoLogica");
    try {
      ExpressaoMatematica();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR_QUE:
        jj_consume_token(MENOR_QUE);
                    MenorQue jjtn001 = new MenorQue(JJTMENORQUE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
        }
        break;
      case MAIOR_QUE:
        jj_consume_token(MAIOR_QUE);
                  MaiorQue jjtn002 = new MaiorQue(JJTMAIORQUE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
              Igual jjtn003 = new Igual(JJTIGUAL);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte003;}
              }
              if (jjte003 instanceof ParseException) {
                {if (true) throw (ParseException)jjte003;}
              }
              {if (true) throw (Error)jjte003;}
        } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
              }
        }
        break;
      case DEFERENTE:
        jj_consume_token(DEFERENTE);
                  Diferente jjtn004 = new Diferente(JJTDIFERENTE);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte004;}
                  }
                  if (jjte004 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte004;}
                  }
                  {if (true) throw (Error)jjte004;}
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
        }
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
                    MenorIgual jjtn005 = new MenorIgual(JJTMENORIGUAL);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte005) {
                    if (jjtc005) {
                      jjtree.clearNodeScope(jjtn005);
                      jjtc005 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte005 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte005;}
                    }
                    if (jjte005 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte005;}
                    }
                    {if (true) throw (Error)jjte005;}
        } finally {
                    if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005,  2);
                    }
        }
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
                    MaiorIgual jjtn006 = new MaiorIgual(JJTMAIORIGUAL);
                    boolean jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
        try {
          ExpressaoMatematica();
        } catch (Throwable jjte006) {
                    if (jjtc006) {
                      jjtree.clearNodeScope(jjtn006);
                      jjtc006 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte006;}
                    }
                    if (jjte006 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte006;}
                    }
                    {if (true) throw (Error)jjte006;}
        } finally {
                    if (jjtc006) {
                      jjtree.closeNodeScope(jjtn006,  2);
                    }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("RelacaoLogica");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("TipoMatematico(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) { if (!jj_rescan) trace_return("TipoMatematico(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("TipoMatematico(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(PARENTESE_ABRIR)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("FatorLogico(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) { if (!jj_rescan) trace_return("FatorLogico(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FatorLogico(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (!jj_rescan) trace_call("FatorMatematico(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) { if (!jj_rescan) trace_return("FatorMatematico(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("FatorMatematico(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(PARENTESE_ABRIR)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(PARENTESE_FECHAR)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (!jj_rescan) trace_call("TermoLogico(LOOKING AHEAD...)");
    if (jj_3R_20()) { if (!jj_rescan) trace_return("TermoLogico(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("TermoLogico(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MULTIPLICAR)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(DIVIDIR)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(NUM_PF)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (!jj_rescan) trace_call("ExpressaoLogica(LOOKING AHEAD...)");
    if (jj_3R_15()) { if (!jj_rescan) trace_return("ExpressaoLogica(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ExpressaoLogica(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_13() {
    if (!jj_rescan) trace_call("TermoMatematico(LOOKING AHEAD...)");
    if (jj_3R_16()) { if (!jj_rescan) trace_return("TermoMatematico(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("TermoMatematico(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(NUM_INTEIRO)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (!jj_rescan) trace_call("Numero(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) { if (!jj_rescan) trace_return("Numero(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Numero(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(SOMAR)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(SUBTRAIR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (!jj_rescan) trace_call("ExpressaoMatematica(LOOKING AHEAD...)");
    if (jj_3R_13()) { if (!jj_rescan) trace_return("ExpressaoMatematica(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("ExpressaoMatematica(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(MAIOR_IGUAL)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(MENOR_IGUAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(DEFERENTE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(MENOR_QUE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(MAIOR_QUE)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (!jj_rescan) trace_call("Identificador(LOOKING AHEAD...)");
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("Identificador(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Identificador(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("RelacaoLogica(LOOKING AHEAD...)");
    if (jj_3R_11()) { if (!jj_rescan) trace_return("RelacaoLogica(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) { if (!jj_rescan) trace_return("RelacaoLogica(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("RelacaoLogica(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c000,0x0,0xc000,0xc000,0xc000,0x360000,0x360000,0xc000,0x0,0x3000000,0x3000000,0xc000000,0xc000000,0x0,0x0,0x0,0x360000,0x80000,0x360000,0x360000,0x10000000,0x0,0x0,0x10000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x400,0x0,0x0,0x0,0x2200,0x2200,0x0,0x4,0x0,0x0,0x0,0x0,0x3800,0x3800,0x1800,0x2200,0x0,0x2200,0x2200,0x3800,0x1,0x2,0x3800,0x1f8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
