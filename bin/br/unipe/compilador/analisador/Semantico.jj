/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Semantico.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  STATIC = false;
               
                   
                 
                                    
                            
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Gramatica)
package br.unipe.compilador.analisador;
import br.unipe.compilador.analisador.CustomNode.TIPO;

public class Gramatica/*@bgen(jjtree)*/implements GramaticaTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTGramaticaState jjtree = new JJTGramaticaState();

/*@egen*/
  Controlador control = new Controlador();
}

PARSER_END(Gramatica)

TOKEN_MGR_DECLS :
{}

/* Espacos a serem desprezados no inicio de cada token */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}

/* Trata os erros l\u00e9xicos */
SPECIAL_TOKEN :
{
  < INVALID_LEXICAL : (~[ "a"-"z", "A"-"Z", "0"-"9", "\"", "(", ")", "[", "]", "{", "}", ";", ",", ".", "=", ">", "<", "!", "+", "-", "*", "/", "%", " ", "\t", "\n", "\r", "\f" ])+ >
| < INVALID_CONST : "\"" (~[ "\n", "\r", "\"" ])* [ "\n", "\r" ] >
}

TOKEN :
{
  < INT : "int" >
| < FLOAT : "float" >
| < VOID : "void" >
}

TOKEN :
{
  < RETURN : "return" >
| < WHILE : "while" >
| < ELSE : "else" >
| < IF : "if" >
| < BREAK : "break" >
| < TRUE : "true" >
| < FALSE : "false" >
}

TOKEN :
{
  < SOMAR : "+" >
| < SUBTRAIR : "-" >
| < MULTIPLICAR : "*" >
| < DIVIDIR : "/" >
}

TOKEN :
{
  < PARENTESE_ABRIR : "(" >
| < PARENTESE_FECHAR : ")" >
| < CHAVE_ABRIR : "{" >
| < CHAVE_FECHAR : "}" >
}

TOKEN :
{
  < OR : "OR" >
| < AND : "AND" >
}

TOKEN :
{
  < ATRIBUICAO : "=" >
| < MENOR_QUE : "<" >
| < MAIOR_QUE : ">" >
| < IGUAL : "==" >
| < DEFERENTE : "!=" >
| < MENOR_IGUAL : "<=" >
| < MAIOR_IGUAL : " >=" >
}

TOKEN :
{
  < PONTO_VIRGULA : ";" >
| < VIRGULA : "," >
}

TOKEN :
{
  < NUM_INTEIRO : (< DIGITO >)+ >
| < NUM_PF : (< DIGITO >)+ "." (< DIGITO >)+ >
| < ID :
    < LETRA >
    (
      < LETRA >
    | < DIGITO >
    )* >
| < #LETRA : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGITO : [ "0"-"9" ] >
}

SimpleNode Programa() :
{/*@bgen(jjtree) Programa */
  Programa jjtn000 = new Programa(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Programa */
  try {
/*@egen*/
  (
    Funcao()
  )
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Funcao() :
{/*@bgen(jjtree) Funcao */
  Funcao jjtn000 = new Funcao(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  CustomNode.TIPO tipo;
}
{/*@bgen(jjtree) Funcao */
  try {
/*@egen*/
  tipo = TipoRetorno() t = < ID > ParametrosFuncao() CorpoFuncao()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    control.declaracao(tipo, t, true, true);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

TIPO TipoRetorno() :
{/*@bgen(jjtree) TipoRetorno */
  TipoRetorno jjtn000 = new TipoRetorno(JJTTIPORETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoRetorno */
  try {
/*@egen*/
  < VOID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return TIPO.NULL;
  }
| < INT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return TIPO.INT;
  }
| < FLOAT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return TIPO.FLOAT;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ParametrosFuncao()       :
{}
{
  < PARENTESE_ABRIR >
  [
    ParametroFuncao()
    (
      < VIRGULA > ParametroFuncao()
    )*
  ]
  < PARENTESE_FECHAR >
}

void ParametroFuncao() :
{/*@bgen(jjtree) ParametroFuncao */
  ParametroFuncao jjtn000 = new ParametroFuncao(JJTPARAMETROFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  CustomNode.TIPO tipo;
}
{/*@bgen(jjtree) ParametroFuncao */
  try {
/*@egen*/
  (
    < INT >
    {
      tipo = CustomNode.TIPO.INT;
    }
  | < FLOAT >
    {
      tipo = CustomNode.TIPO.FLOAT;
    }
  )
  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    control.declaracao(tipo, t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CorpoFuncao() :
{/*@bgen(jjtree) CorpoFuncao */
  CorpoFuncao jjtn000 = new CorpoFuncao(JJTCORPOFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CorpoFuncao */
  try {
/*@egen*/
  < CHAVE_ABRIR >
  (
    Declaracao() < PONTO_VIRGULA >
  )*
  (
    Comando()
  )*
  < CHAVE_FECHAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Comando()       :
{}
{
  (
    Atribuicao() < PONTO_VIRGULA >
  )
| If()
| While()
|
  (
    Return() < PONTO_VIRGULA >
  )
| (< BREAK > < PONTO_VIRGULA >)
| < PONTO_VIRGULA >
}

void Declaracao() :
{/*@bgen(jjtree) Declaracao */
  Declaracao jjtn000 = new Declaracao(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  CustomNode.TIPO tipo;
}
{/*@bgen(jjtree) Declaracao */
  try {
/*@egen*/
  (
    < INT >
    {
      tipo = TIPO.INT;
    }
  | < FLOAT >
    {
      tipo = TIPO.FLOAT;
    }
  )
  t = < ID > [< ATRIBUICAO > ExpressaoMatematica()]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    control.declaracao(tipo, t);
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Atribuicao() :
{/*@bgen(jjtree) Atribuicao */
  Atribuicao jjtn000 = new Atribuicao(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Atribuicao */
  try {
/*@egen*/
  t = < ID > ValorAtribuicao()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ValorAtribuicao()       :
{}
{
  < ATRIBUICAO > ExpressaoMatematica()
}

void ExpressaoMatematica() :
{/*@bgen(jjtree) ExpressaoMatematica */
  ExpressaoMatematica jjtn000 = new ExpressaoMatematica(JJTEXPRESSAOMATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressaoMatematica */
  try {
/*@egen*/
  TermoMatematico()
  (
    < SOMAR >/*@bgen(jjtree) #Adicao( 2) */
              {
                Adicao jjtn001 = new Adicao(JJTADICAO);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ TermoMatematico()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           
| < SUBTRAIR >/*@bgen(jjtree) #Subtracao( 2) */
               {
                 Subtracao jjtn002 = new Subtracao(JJTSUBTRACAO);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ TermoMatematico()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/              
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TermoMatematico()       :
{}
{
  FatorMatematico()
  (
    < MULTIPLICAR >/*@bgen(jjtree) #Multiplicacao( 2) */
                    {
                      Multiplicacao jjtn001 = new Multiplicacao(JJTMULTIPLICACAO);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ FatorMatematico()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/                  
| < DIVIDIR >/*@bgen(jjtree) #Divisao( 2) */
              {
                Divisao jjtn002 = new Divisao(JJTDIVISAO);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ FatorMatematico()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/            
)*
}

void FatorMatematico()       :
{}
{
  LOOKAHEAD(3)
  (
    < PARENTESE_ABRIR > ExpressaoMatematica() < PARENTESE_FECHAR >
  )
| TipoMatematico()
}

void TipoMatematico()       :
{}
{
  Identificador()
| Numero()
}

void Identificador() :
{/*@bgen(jjtree) Identificador */
  Identificador jjtn000 = new Identificador(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identificador */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setTipo(control.getTipo(t));
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Numero() :
{/*@bgen(jjtree) Numero */
  Numero jjtn000 = new Numero(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Numero */
  try {
/*@egen*/
  (
    t = < NUM_INTEIRO >
    {
      jjtn000.setTipo(CustomNode.TIPO.INT);
    }
  | t = < NUM_PF >
    {
      jjtn000.setTipo(CustomNode.TIPO.FLOAT);
    }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void If() :
{/*@bgen(jjtree) If */
  If jjtn000 = new If(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  < IF > < PARENTESE_ABRIR > ExpressaoLogica() < PARENTESE_FECHAR > < CHAVE_ABRIR >
  (
    Comando()
  )*
  < CHAVE_FECHAR > [ Else() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Else() :
{/*@bgen(jjtree) Else */
  Else jjtn000 = new Else(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
  try {
/*@egen*/
  < ELSE > < CHAVE_ABRIR >
  (
    Comando()
  )*
  < CHAVE_FECHAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() :
{/*@bgen(jjtree) While */
  While jjtn000 = new While(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  < WHILE > < PARENTESE_ABRIR > ExpressaoLogica() < PARENTESE_FECHAR > < CHAVE_ABRIR >
  (
    Comando()
  )*
  < CHAVE_FECHAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Return() :
{/*@bgen(jjtree) Return */
  Return jjtn000 = new Return(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
  try {
/*@egen*/
  < RETURN > [ ExpressaoMatematica() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressaoLogica() :
{/*@bgen(jjtree) ExpressaoLogica */
  ExpressaoLogica jjtn000 = new ExpressaoLogica(JJTEXPRESSAOLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressaoLogica */
  try {
/*@egen*/
  TermoLogico()
  (
    < OR >/*@bgen(jjtree) #Or( 2) */
           {
             Or jjtn001 = new Or(JJTOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ TermoLogico()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/       
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TermoLogico()       :
{}
{
  FatorLogico()
  (
    < AND >/*@bgen(jjtree) #And( 2) */
            {
              And jjtn001 = new And(JJTAND);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ FatorLogico()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/        
)*
}

void FatorLogico()       :
{}
{
  LOOKAHEAD(3)
  (
    < PARENTESE_ABRIR > ExpressaoLogica() < PARENTESE_FECHAR >
  )
| RelacaoLogica()
}

void RelacaoLogica()       :
{}
{
  ExpressaoMatematica()
  (
    < MENOR_QUE >/*@bgen(jjtree) #MenorQue( 2) */
                  {
                    MenorQue jjtn001 = new MenorQue(JJTMENORQUE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/             
| < MAIOR_QUE >/*@bgen(jjtree) #MaiorQue( 2) */
                {
                  MaiorQue jjtn002 = new MaiorQue(JJTMAIORQUE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/             
| < IGUAL >/*@bgen(jjtree) #Igual( 2) */
            {
              Igual jjtn003 = new Igual(JJTIGUAL);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
              }
            }
/*@egen*/          
| < DEFERENTE >/*@bgen(jjtree) #Diferente( 2) */
                {
                  Diferente jjtn004 = new Diferente(JJTDIFERENTE);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/              
| < MENOR_IGUAL >/*@bgen(jjtree) #MenorIgual( 2) */
                  {
                    MenorIgual jjtn005 = new MenorIgual(JJTMENORIGUAL);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                  }
                  try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
                  } catch (Throwable jjte005) {
                    if (jjtc005) {
                      jjtree.clearNodeScope(jjtn005);
                      jjtc005 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte005 instanceof RuntimeException) {
                      throw (RuntimeException)jjte005;
                    }
                    if (jjte005 instanceof ParseException) {
                      throw (ParseException)jjte005;
                    }
                    throw (Error)jjte005;
                  } finally {
                    if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005,  2);
                    }
                  }
/*@egen*/               
| < MAIOR_IGUAL >/*@bgen(jjtree) #MaiorIgual( 2) */
                  {
                    MaiorIgual jjtn006 = new MaiorIgual(JJTMAIORIGUAL);
                    boolean jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
                  }
                  try {
/*@egen*/ ExpressaoMatematica()/*@bgen(jjtree)*/
                  } catch (Throwable jjte006) {
                    if (jjtc006) {
                      jjtree.clearNodeScope(jjtn006);
                      jjtc006 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                      throw (RuntimeException)jjte006;
                    }
                    if (jjte006 instanceof ParseException) {
                      throw (ParseException)jjte006;
                    }
                    throw (Error)jjte006;
                  } finally {
                    if (jjtc006) {
                      jjtree.closeNodeScope(jjtn006,  2);
                    }
                  }
/*@egen*/               
)
}